- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - vars/vpc_setup.yml
  tasks:
    - name: Import VPC Variables
      include_vars: vars/vpc_setup.yml

    - name: Create vprofile VPC
      ec2_vpc_net:
        name: "{{vpc_name}}"
        cidr_block: "{{vpcCidr}}"
        region: "{{region}}"
        dns_support: yes
        dns_hostnames: yes
        tenancy: default
        state: "{{state}}"
      register: vpcout

    - name: create Public Subnet 1 in Zone1
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{ region }}"
        az: "{{ zone1 }}"
        state: "{{state}}"
        cidr: "{{ PubSub1Cidr }}"
        map_public: yes
        resource_tags:
          Name: vprofile-pubsub1
      register: pubsub1_out

    - name: create Public subnet 2 in zone2
      ec2_vpc_subnet:
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        az: "{{ zone2 }}"
        state: "{{state}}"
        cidr: "{{ PubSub2Cidr }}"
        map_public: yes
        resource_tags:
          Name: vprofile_pubsub2
      register: pubsub2_out

    - name: create Public subnet 3 in zone3
      ec2_vpc_subnet:
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        az: "{{ zone3 }}"
        state: "{{state}}"
        cidr: "{{ PubSub3Cidr }}"
        map_public: yes
        resource_tags:
          Name: vprofile_pubsub3
      register: pubsub3_out

    - name: create Private Subnet 1 in Zone1
      ec2_vpc_subnet:
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        az: "{{ zone1 }}"
        state: "{{state}}"
        cidr: "{{ PrivSub1Cidr }}"
        resource_tags:
          Name: vprofile_privsub1
      register: privsub1_out

    - name: create Private subnet 2 in zone2
      ec2_vpc_subnet:
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        az: "{{ zone2 }}"
        state: "{{state}}"
        cidr: "{{ PrivSub2Cidr }}"
        resource_tags:
          Name: vprofile_privsub2
      register: privsub2_out

    - name: create Private subnet 3 in zone3
      ec2_vpc_subnet:
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        az: "{{ zone3 }}"
        state: "{{state}}"
        cidr: "{{ PrivSub3Cidr }}"
        resource_tags:
          Name: vprofile_privsub3
      register: privsub3_out

    - name: Internet Gateway Setup
      ec2_vpc_igw:
        vpc_id: "{{ vpcout.vpc.id }}"
        region: "{{ region }}"
        state: "{{state}}"
        resource_tags:
          Name: vprofile_IGW
      register: igw_out

    - name: Set up public subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{ region }}"
        tags:
          Name: VProfile-PubRT
        subnets:
          - "{{pubsub1_out.subnet.id}}"
          - "{{pubsub2_out.subnet.id}}"
          - "{{pubsub3_out.subnet.id}}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{igw_out.gateway_id}}"
      register: pubRT_out

    - name: Create new nat gateway and allocate new EIP if a nat gateway does not yet exist in the subnet.
      ec2_vpc_nat_gateway:
        state: "{{state}}"
        subnet_id: "{{ pubsub1_out.subnet.id }}"
        wait: yes
        region: "{{ region }}"
        if_exist_do_not_create: true
      register: NATGW_out

    - name: Set up Private subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{ region }}"
        tags:
          Name: Vprofile_PrivRT
        subnets:
          - "{{ privsub1_out.subnet.id }}"
          - "{{ privsub2_out.subnet.id }}"
          - "{{ privsub3_out.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ NATGW_out.nat_gateway_id }}"
      register: privRT_out

    - debug:
        var: "{{item}}"
      loop:
        - vpcout.vpc.id
        - pubsub1_out.subnet.id
        - pubsub2_out.subnet.id
        - pubsub3_out.subnet.id
        - privsub1_out.subnet.id
        - privsub2_out.subnet.id
        - privsub3_out.subnet.id
        - igw_out.gateway_id
        - pubRT_out.route_table.id
        - NATGW_out.nat_gateway_id
        - privRT_out.route_table.id

    - set_fact:
         vpcid: "{{vpcout.vpc.id}}"
         pubsub1id: "{{ pubsub1_out.subnet.id }}"
         pubsub2id: "{{ pubsub2_out.subnet.id }}"
         pubsub3id: "{{ pubsub3_out.subnet.id }}"
         privsub1id: "{{ privsub1_out.subnet.id }}"
         privsub2id: "{{ privsub2_out.subnet.id }}"
         privsub3id: "{{ privsub3_out.subnet.id }}"
         igwid: "{{ igw_out.gateway_id }}"
         pubRTid: "{{ pubRT_out.route_table.id }}"
         NATGWid: "{{ NATGW_out.nat_gateway_id }}"
         privRTid: "{{ privRT_out.route_table.id }}"
         cacheable: yes

    - name: Create variables file for vpc output
      copy:
         content: "vpcid: {{ vpcout.vpc.id }}\npubsub1id: {{ pubsub1_out.subnet.id }}\npubsub2id: {{ pubsub2_out.subnet.id }}\npubsub3id: {{ pubsub3_out.subnet.id }}\nprivsub1id: {{ privsub1_out.subnet.id }}\nprivsub2id: {{ privsub2_out.subnet.id }}\nprivsub3id: {{ privsub3_out.subnet.id }}\nigwid: {{ igw_out.gateway_id }}\npubRTid: {{ pubRT_out.route_table.id }}\nNATGWid: {{ NATGW_out.nat_gateway_id }}\nprivRTid: {{ privRT_out.route_table.id }}\n"
         dest: vars/output_vars

    - name: Create security group for RDS
      ec2_group:
        name: rds_sg
        description: Security group for RDS
        region: "{{ region }}"
        vpc_id: "{{ vpcout.vpc.id }}"
        tags:
          Name: "{{ sg_tag }}"
      register: rds_sg_out

    - name: Create security group for ELB
      ec2_group:
        name: elb_sg
        description: Security group for ELB
        region: "{{ region }}"
        vpc_id: "{{ vpcout.vpc.id }}"
        tags:
          Name: "{{ sg_tag }}"
      register: elb_sg_out

    - name: Create RDS Subnet Group
      rds_subnet_group:
        name: "{{ rds_subnet_group }}"
        description: "Subnet group for RDS"
        subnets:
          - "{{ privsub1_out.subnet.id }}"
          - "{{ privsub2_out.subnet.id }}"
          - "{{ privsub3_out.subnet.id }}"
        region: "{{ region }}"
      register: rds_subnet_group_out

    - name: Create RDS instance
      rds_instance:
        db_instance_identifier: "{{ rds_instance_identifier }}"
        db_name: "{{ rds_db_name }}"
        master_username: "{{ rds_master_username }}"
        master_user_password: "{{ rds_master_password }}"
        db_instance_class: db.t2.micro
        engine: mysql
        multi_az: yes
        vpc_security_group_ids:
          - "{{ rds_sg_out.group_id }}"
        db_subnet_group_name: "{{ rds_subnet_group_out.subnet_group.name }}"
        allocated_storage: 20
        region: "{{ region }}"
        state: present
      register: rds_out

    - name: Create RDS read replica
      rds_instance:
        db_instance_identifier: "{{ rds_instance_identifier }}-replica"
        source_db_instance_identifier: "{{ rds_out.instance.id }}"
        db_instance_class: db.t2.micro
        engine: mysql
        region: "{{ secondary_region }}"
        vpc_security_group_ids:
          - "{{ rds_sg_out.group_id }}"
        state: present
      register: rds_replica_out

    - name: Create ELB
      elb:
        name: "{{ elb_name }}"
        state: present
        zones:
          - "{{ zone1 }}"
          - "{{ zone2 }}"
          - "{{ zone3 }}"
        security_group_ids:
          - "{{ elb_sg_out.group_id }}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_protocol: http
            instance_port: 80
        health_check:
          ping_protocol: http
          ping_port: 80
          ping_path: "/"
          response_timeout: 5
          interval: 30
          unhealthy_threshold: 2
          healthy_threshold: 2
        region: "{{ region }}"
      register: elb_out

    - name: Create S3 bucket for backup
      aws_s3_bucket:
        name: "vprofile-backup-{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
        state: present
        region: "{{ region }}"
      register: s3_out

    - name: Create RDS snapshot
      rds_snapshot:
        db_instance_identifier: "{{ rds_instance_identifier }}"
        db_snapshot_identifier: "snapshot-{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
      register: rds_snapshot_out

    - name: Upload RDS snapshot to S3
      s3:
        bucket: "{{ s3_out.bucket.name }}"
        object: "{{ rds_snapshot_out.snapshot.DBInstanceIdentifier }}-{{ rds_snapshot_out.snapshot.DBSnapshotIdentifier }}.snapshot"
        src: "{{ rds_snapshot_out.snapshot.DBSnapshotArn }}"
      register: s3_upload_out

    - debug:
        msg: "RDS instance and read replica created, ELB and S3 bucket configured. VPC and subnets setup complete."
